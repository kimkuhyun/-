--1) SCORE 테이블과 동일한 구조를 갖는 SCORE_CHK를 생성하고 RESULT 60이상 90이하만 입력 가능하도록 하세요.
CREATE TABLE SCORE_CHK (
SNO VARCHAR2(8) NOT NULL,
CNO VARCHAR2(4) NOT NULL,
RESULT NUMBER(3) CHECK (RESULT BETWEEN 60 AND 90)
);

--2) STUDENT 테이블과 동일한 구조를 갖는 STUDENT_COPY 테이블을 생성하면서 SNO은 PK로 SNAME은 NOT NULL로 SYEAR의 DEFAULT는 1로 
--   설정하세요.
CREATE TABLE STUDENT_COPY(
SNO NUMBER(8) PRIMARY KEY,
SAME VARCHAR2(20) NOT NULL,
SYEAR VARCHAR2(9) DEFAULT '1'
);


--3) COURSE 테이블과 동일한 구조를 갖는 COURSE_CONTSRAINT 테이블을 생성하면서 CNO, CNAME을 PK로 PNO은 PROFESSOR_PK의 PNO을 참조하여
--   FK로 설정하고 ST_NUM은 DEFAULT 2로 설정하세요.
CREATE TABLE COURSE_CONTSRAINT(
CNO NUMBER(8),
CNAME VARCHAR2(10),
PNO NUMBER(4,0),
CONSTRAINT PK_COURSE_CONTSRAINT PRIMARY KEY(CNO, CNAME),
CONSTRAINT FK_COURSE_CONTSRAINT FOREIGN KEY(PNO) REFERENCES PROFESSOR_PK(PNO));

--1) 다음 구조를 갖는 테이블을 생성하세요.
--PRODUCT 테이블 - PNO NUMBER PK              : 제품번호
--                PNMAE VARCHAR2(50)          : 제품이름
--                PRI NUMBER                  : 제품단가
--PAYMENT 테이블 - MNO NUMBER PK              : 전표번호
--               PDATE DATE NOT NULL         : 판매일자
--                CNAME VARCHAR2(50) NOT NULL : 고객명
--                TOTAL NUMBER TOTAL > 0      : 총액
--PAYMENT_DETAIL - MNO NUMBER PK FK           : 전표번호
--                PNO NUMBER PK FK            : 제품번호
--                AMOUNT NUMBER NOT NULL      : 수량
--                PRICE NUMBER NOT NULL       : 단가
--                TOTAL_PRICE NUMBER NOT NULL TOTAL_PRICE > 0 : 금액

CREATE TABLE PRODUCT (
PNO NUMBER PRIMARY KEY,
PNAME VARCHAR2(50),
PRI NUMBER
);

CREATE TABLE PAYMENT (
MNO NUMBER PRIMARY KEY,
PDATE DATE NOT NULL,
CNAME VARCHAR2(50) NOT NULL,
TOTAL NUMBER CHECK (TOTAL > 0)
);

CREATE TABLE PAYMENT_DETAIL (
MNO NUMBER,
PNO NUMBER,
AMOUNT NUMBER NOT NULL,
TOTAL_PRICE NUMBER NOT NULL CHECK (TOTAL_PRICE > 0),
CONSTRAINT PK_PAYMENT_DETAIL_MNO_PNO PRIMARY KEY (MNO,PNO),
CONSTRAINT FK_PAYMENT_DETAIL_PNO FOREIGN KEY(PNO) REFERENCES PRODUCT(PNO),
CONSTRAINT FK_PAYMENT_DETAIL_MNO FOREIGN KEY(MNO) REFERENCES PAYMENT(MNO)
);



--1) 과목번호, 과목이름, 교수번호, 교수이름을 담을 수 있는 변수들을 선언하고 
--   유기화학 과목의 과목번호, 과목이름, 교수번호, 교수이름을 출력하세요.
DECLARE 
CNO COURSE%ROWTYPE;
PNO PROFESSOR%ROWTYPE;
BEGIN
CNO.CNO := '1212';
CNO.CNAME := '유기화학';
PNO.PNO := '1002';
PNO.PNAME := '곤송승';
DBMS_OUTPUT.PUT_LINE(CNO.CNO);
DBMS_OUTPUT.PUT_LINE(CNO.CNAME);
DBMS_OUTPUT.PUT_LINE(PNO.PNO);
DBMS_OUTPUT.PUT_LINE(PNO.PNAME);
END;

--2) 위 데이터들을 레코드로 선언하고 출력하세요.
DECLARE
TYPE COURSE_PROFESSOR IS RECORD(
CC COURSE%ROWTYPE,
PP PROFESSOR%ROWTYPE
);
AA COURSE_PROFESSOR;
BEGIN 
   AA.CC.CNO := '1212';
   AA.CC.CNAME := '유기화학';
   AA.PP.PNO := '1002';
    SELECT PNAME INTO AA.PP.PNAME 
    FROM PROFESSOR WHERE PNO = AA.PP.PNO;
DBMS_OUTPUT.PUT_LINE(AA.CC.CNO);
DBMS_OUTPUT.PUT_LINE(AA.CC.CNAME);
DBMS_OUTPUT.PUT_LINE(AA.PP.PNO);
DBMS_OUTPUT.PUT_LINE(AA.PP.PNAME);
END;




















