--1) 어제 만든 SCORE_STGR 테이블의 SNO 컬럼에 INDEX를 추가하세요.
CREATE INDEX SCORE_STGR_IDX ON SCORE_STGR(SNO);

--2) 어제 만든 ST_COURSEPF 테이블의 SNO, CNO, PNO 다중 컬럼에 INDEX를 추가하세요.
CREATE INDEX ST_COURSEPF_IDX ON ST_COURSEPF(SNO,CNO,PNO);
--뷰 이름은 자유
--1) 학생의 평점 4.5 만점으로 환산된 정보를 검색할 수 있는 뷰를 생성하세요.
CREATE OR REPLACE VIEW ST_STUDENT_AVG_AVR(ST_SNO,ST_SNAME,ST_AVR)
AS(SELECT SNO, SNAME, AVG(AVR*1.125) AS ST_AVR FROM STUDENT GROUP BY SNO,SNAME);

--2) 각 과목별 기말고사 평균 점수를 검색할 수 있는 뷰를 생성하세요.
CREATE OR REPLACE VIEW SC_STUDENT_AVG_RESULT(SC_CNAME,SC_RESULT)
AS(SELECT CNAME, TRUNC(AVG(RESULT),2) AS SC_RESULT FROM SCORE NATURAL JOIN COURSE GROUP BY CNAME);

--3) 각 사원과 관리자(MGR)의 이름을 검색할 수 있는 뷰를 생성하세요.
CREATE OR REPLACE VIEW E_MGR_NAME(E_NAME, E_MGR_NAME)
AS(SELECT E.ENAME AS E_NAME, M.MGR AS E_MGR_NAME FROM EMP E LEFT JOIN EMP M ON E.ENO =M.MGR);

--4) 각 과목별 기말고사 평가 등급(A~F)까지와 해당 학생 정보를 검색할 수 있는 뷰를 생성하세요.
CREATE OR REPLACE VIEW ST_SCORE_GRADE(ST_SNAME,ST_CNAME, ST_RESULT, ST_GRADE)
AS(SELECT ST.SNAME, C.CNAME AS ST_CNAME, SC.RESULT AS ST_RESULT, SCG.GRADE AS ST_GRADE
FROM STUDENT ST JOIN SCORE SC ON ST.SNO = SC.SNO JOIN SCGRADE SCG ON SC.RESULT BETWEEN SCG.LOSCORE AND SCG.HISCORE JOIN COURSE C ON C.CNO = SC.CNO);

--5) 물리학과 교수의 과목을 수강하는 학생의 명단을 검색할 뷰를 생성하세요.
CREATE OR REPLACE VIEW ST_PRO_COUR(ST_SNAME)
AS(SELECT SNAME AS ST_SNAME 
FROM STUDENT ST
JOIN SCORE SC ON ST.SNO = SC.SNO
JOIN COURSE C ON SC.CNO = C.CNO
JOIN PROFESSOR P ON C.PNO = P.PNO WHERE ST.MAJOR = '물리');
SELECT * FROM ST_PRO_COUR;
--1) 4.5 환산 평점이 가장 높은 3인의 학생을 검색하세요.
SELECT ROWNUM, A.SNO, A.SNAME, A.AVR
FROM(SELECT SNO, SNAME, TRUNC(AVG(AVR*1.125),2) AS AVR FROM STUDENT GROUP BY SNO,SNAME ORDER BY AVR DESC)A
WHERE ROWNUM<=3;

--2) 기말고사 과목별 평균이 높은 3과목을 검색하세요.
SELECT ROWNUM, A.CNAME, A.RESULT
FROM(SELECT CNAME, TRUNC(AVG(RESULT),2) AS RESULT FROM SCORE NATURAL JOIN COURSE GROUP BY CNAME ORDER BY RESULT DESC)A
WHERE ROWNUM<=3

--3) 학과별, 학년별, 기말고사 평균이 순위 3까지를 검색하세요.(학과, 학년, 평균점수 검색)
SELECT ROWNUM,A.MAJOR, A.SYEAR, A.RESULT
FROM(SELECT MAJOR, SYEAR, TRUNC(AVG(RESULT),2) AS RESULT FROM STUDENT NATURAL JOIN SCORE GROUP BY MAJOR, SYEAR ORDER BY RESULT DESC)A
WHERE ROWNUM <= 3

--4) 기말고사 성적이 높은 과목을 담당하는 교수 3인을 검색하세요.(교수이름, 과목명, 평균점수 검색)
SELECT ROWNUM,A.PNAME, A.CNAME, A.RESULT
FROM(SELECT PNAME,CNAME,TRUNC(AVG(RESULT),2) AS RESULT FROM SCORE NATURAL JOIN COURSE NATURAL JOIN PROFESSOR GROUP BY PNAME, CNAME ORDER BY RESULT DESC)A
WHERE ROWNUM <=3

--5) 교수별로 현재 수강중인 학생의 수를 검색하세요.
SELECT A.PNO, A.PNAME, A.STUDENT_CUNT
FROM(SELECT PNO,PNAME,COUNT(DISTINCT SNO) AS STUDENT_CUNT FROM STUDENT NATURAL JOIN SCORE NATURAL JOIN COURSE NATURAL JOIN PROFESSOR GROUP BY PNO,PNAME )A;

--1) CNO이 PK인 COURSE_PK 테이블을 생성하세요.(1번 방식으로)
CREATE TABLE COURSE_PK99 (CNO NUMBER(4) PRIMARY KEY,CNAME VARCHAR2(20),STNUM NUMBER(4),PNO VARCHAR2(20));

--2) PNO이 PK인 PROFESSOR_PK 테이블을 생성하세요.(2번 방식으로)
CREATE TABLE PROFESSOR_PK99 (CNO NUMBER(4), CNAME VARCHAR2(20), ST_NUM NUMBER(4), PNO VARCHAR2(20),CONSTRAINT PROFESSOR_NO_PK  PRIMARY KEY(PNO));

--3) PF_TEMP 테이블에 PNO을 PK로 추가하세요.
ALTER TABLE PF_TEMP ADD CONSTRAINT  PF_TEMP_PNO PRIMARY KEY(PNO);

--4) COURSE_PROFESSOR 테이블에 CNO, PNO을 PK로 추가하세요.
ALTER TABLE COURSE_PROFESSOR ADD CONSTRAINT  PK_COURSE_PROFESSOR_CNO_PNO PRIMARY KEY(CNO,PNO);

--5) BOARD_NO(NUMBER)를 PK로 갖으면서 BOARD_TITLE(VARCHAR2(200)), BOARD_CONTENT(VARCHAR2(2000)), 
--   BOARD_WRITER(VARCHAR2(20)), BOARD_FRGT_DATE(DATE), BOARD_LMDF_DATE(DATE) 컬럼을 갖는 T_BOARD 테이블을 생성하세요.
CREATE TABLE T_BOARD(BOARD_NO NUMBER(10),BOARD_TITLE VARCHAR2(200), BOARD_CONTENT VARCHAR2(2000),BOARD_WRITER VARCHAR2(20), BOARD_FRGT_DATE DATE, BOARD_LMDF_DATE DATE, 
CONSTRAINT PK_BOARD_NO PRIMARY KEY(BOARD_NO));

--6) BOARD_NO(NUMBER), BOARD_FILE_NO(NUMBER)를 PK로 갖으면서 BOARD_FILE_NM(VARCHAR2(200)), BOARD_FILE_PATH(VARCHAR2(2000)),
--   ORIGIN_FILE_NM(VARCHAR2(200)) 컬럼을 갖는 T_BOARD_FILE 테이블을 생성하세요.
CREATE TABLE T_BOARD_FILE(BOARD_NO NUMBER(10), BOARD_FILE_NO NUMBER(10),BOARD_FILE_NM VARCHAR2(200), BOARD_FILE_PATH VARCHAR2(2000),ORIGIN_FILE_NM VARCHAR2(200)
,CONSTRAINT PK_BOARD_NO_FILE_NO PRIMARY KEY(BOARD_NO, BOARD_FILE_NO));
--7) 다음 구조를 갖는 테이블을 생성하세요.
--   T_SNS                              T_SNS_DETAIL                        T_SNS_UPLOADED
--   SNS_NO(PK)    SNS_NM               SNS_NO(PK, FK)   SNS_BEN            SNS_NO(PK, FK)    SNS_UPL_NO(PK)
--     1            페북                   1               4000                   1                  1
--     2           인스타                  2               10000                  1                  2
--     3           트위터                  3               30000                  2                  1
--                                                                               2                  2
CREATE TABLE T_SNS(SNS_NO NUMBER(10) PRIMARY KEY,SNS_NM VARCHAR2(20));
INSERT INTO T_SNS VALUES (1,'페북');
INSERT INTO T_SNS VALUES (2,'인스타');
INSERT INTO T_SNS VALUES (3,'트위터');

CREATE TABLE T_SNS_DETAI(SNS_NO NUMBER(10), SNS_BEN NUMBER(20), 
CONSTRAINT PK_T_SNS_DETAIL_SNS_NO PRIMARY KEY(SNS_NO),
CONSTRAINT FK_T_SNS_DETAIL_SNS_NO FOREIGN KEY(SNS_NO) REFERENCES T_SNS_DETAI(SNS_NO)); 
INSERT INTO T_SNS_DETAI VALUES(1,4000);
INSERT INTO T_SNS_DETAI VALUES(2,10000);
INSERT INTO T_SNS_DETAI VALUES(3,30000);

CREATE TABLE  T_SNS_UPLOADED(SNS_NO NUMBER(10), SNS_UPL_NO NUMBER(10), 
CONSTRAINT PK_T_SNS_UPLOADED_NO_UPL_NO PRIMARY KEY(SNS_NO,SNS_UPL_NO),
CONSTRAINT FK_T_SNS_UPLOADED_NO FOREIGN KEY(SNS_NO) REFERENCES T_SNS_DETAI(SNS_NO)); 
INSERT INTO T_SNS_UPLOADED VALUES (1,1);
INSERT INTO T_SNS_UPLOADED VALUES (1,2);
INSERT INTO T_SNS_UPLOADED VALUES (2,1);
INSERT INTO T_SNS_UPLOADED VALUES (2,2);


COMMIT;




















































